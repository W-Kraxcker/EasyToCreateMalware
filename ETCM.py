import itertools
import logging
import os
import os.path
import sys
import threading
import time
from contextlib import redirect_stdout
from os import name, path, system
from posix import times_result
from time import sleep

import click
import colorama
import progressbar
from alive_progress import alive_bar, alive_it
from colorama import Back, Fore, Style
from colorama.ansi import clear_line
from progressbar import widgets
from termcolor import colored
from tqdm import tqdm

colorama.init(autoreset=True)

with alive_bar(100) as bar:
    for i in range(100):
        sleep(0.03)
        bar()
os.system("clear")
print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Connecting")
time.sleep(1)
os.system("clear")
def animated_marker():

    widgets = ['Loading: ', progressbar.AnimatedMarker()]
    bar = progressbar.ProgressBar(widgets=widgets).start()

    for i in range(50):
        time.sleep(0.1)
        bar.update(i)

animated_marker()


print("""

 ██████  ███████ 
██    ██ ██      
██    ██ ███████ 
██    ██      ██ 
 ██████  ███████ 
                   𝘾𝙊𝘿𝙀 𝘽𝙔 𝙒-𝙆𝙧𝙖𝙭𝙘𝙠𝙚𝙧  
""")
print(Fore.BLACK+Back.YELLOW+" 1 ", "Andriod")
print("")
print(Fore.BLACK+Back.YELLOW+" 2 ", "Windows")
print("")
print(Fore.BLACK+Back.YELLOW+" 3 ", "IPhone")
print("")
print(Fore.BLACK+Back.YELLOW+" 4 ", "Mac")
print("")
os = int(input(colored("OS >>> ", "red")))

if os == 1:
    import os
    os.system("clear")
    print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Use Andriod")
    time.sleep(0.5)
    os.system("clear")
    def animated_marker():
        widgets = ['Loading: ', progressbar.AnimatedMarker()]
        bar = progressbar.ProgressBar(widgets=widgets).start()

        for i in range(20):
            time.sleep(0.1)
            bar.update(i)

    animated_marker()
    os.system("clear")
    print("███████ ███████ ██████  ██    ██ ███████ ██████")
    print("██      ██      ██   ██ ██    ██ ██      ██   ██ ")
    print("███████ █████   ██████  ██    ██ █████   ██████  ")
    print("     ██ ██      ██   ██  ██  ██  ██      ██   ██ ")
    print("███████ ███████ ██   ██   ████   ███████ ██   ██ ")
    print("")
    print("")
    print(Fore.BLACK+Back.BLUE+" 1 ", "Meterpreter")
    print("")
    print(Fore.BLACK+Back.BLUE+" 2 ", "Shell")
    print("")
    connection = int(input(colored("Server >>> ", "blue")))
    if connection == 1:
        os.system("clear")
        print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Use Meterpreter")
        time.sleep(1)
        os.system("clear")
        def animated_marker():
            widgets = ['Loading: ', progressbar.AnimatedMarker()]
            bar = progressbar.ProgressBar(widgets=widgets).start()

            for i in range(50):
                time.sleep(0.1)
                bar.update(i)

        animated_marker()
        os.system("clear")
        print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Use Meterpreter")
        print("""         ██████  ██████  ███    ██ ███    ██ ███████  ██████ ████████ ██  ██████  ███    ██ 
        ██      ██    ██ ████   ██ ████   ██ ██      ██         ██    ██ ██    ██ ████   ██ 
        ██      ██    ██ ██ ██  ██ ██ ██  ██ █████   ██         ██    ██ ██    ██ ██ ██  ██ 
        ██      ██    ██ ██  ██ ██ ██  ██ ██ ██      ██         ██    ██ ██    ██ ██  ██ ██ 
         ██████  ██████  ██   ████ ██   ████ ███████  ██████    ██    ██  ██████  ██   ████ """)
        print("                                                                                                        𝘾𝙊𝘿𝙀 𝘽𝙔 𝙒-𝙆𝙧𝙖𝙭𝙘𝙠𝙚𝙧")
        print(Fore.BLACK+Back.LIGHTCYAN_EX+" 1 ", "/reverse_http  :  Run a meterpreter server in Android. Tunnel communication over HTTP")
        print("")
        print(Fore.BLACK+Back.LIGHTCYAN_EX+" 2 ", "/reverse https :  Run a meterpreter server in Android. Tunnel communication over HTTPS")
        print("")
        print(Fore.BLACK+Back.LIGHTCYAN_EX+" 3 ", "/reverse_tcp   :  Run a meterpreter server in Android. Connect back stager")
        print("")
        print(Fore.BLACK+Back.LIGHTCYAN_EX+" 4 ", "_reverse_http  :  Connect back to attacker and spawn a Meterpreter shell")
        print("")
        print(Fore.BLACK+Back.LIGHTCYAN_EX+" 5 ", "_reverse_https :  Connect back to attacker and spawn a Meterpreter shell")
        print("")
        print(Fore.BLACK+Back.LIGHTCYAN_EX+" 6 ", "_reverse_tcp   :  Connect back to the attacker and spawn a Meterpreter shell")
        print("")
        connection = int(input(colored("connection : ", 'cyan')))
        if connection == 1:
            os.system("clear")
            print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Use /reverse_http")
            time.sleep(1)
            os.system("clear")
            def animated_marker():
                os.system
                widgets = ['Loading: ', progressbar.AnimatedMarker()]
                bar = progressbar.ProgressBar(widgets=widgets).start()

                for i in range(10):
                    time.sleep(0.1)
                    bar.update(i)
            
            animated_marker()

            
            os.system("clear")
            
            #encoder yes & no
            
            inp = input(colored("Do you want to encoder [Y/n]>", "yellow"))
            if inp=="y" or inp=="Y":
                os.system("clear")
                print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Use Encoder")
                time.sleep(1)
                os.system("clear")
                def animated_marker():

                    widgets = ['Loading: ', progressbar.AnimatedMarker()]
                    bar = progressbar.ProgressBar(widgets=widgets).start()

                    for i in range(50):
                        time.sleep(0.1)
                        bar.update(i)
                animated_marker()
                os.system("clear")
                print("""
                ███████ ███    ██  ██████  ██████  ██████  ███████ ██████  
                ██      ████   ██ ██      ██    ██ ██   ██ ██      ██   ██ 
                █████   ██ ██  ██ ██      ██    ██ ██   ██ █████   ██████  
                ██      ██  ██ ██ ██      ██    ██ ██   ██ ██      ██   ██ 
                ███████ ██   ████  ██████  ██████  ██████  ███████ ██   ██ """)
                print("                                                           𝘾𝙊𝘿𝙀 𝘽𝙔 𝙒-𝙆𝙧𝙖𝙭𝙘𝙠𝙚𝙧")
                print("")
                print("     𝗡𝗮𝗺𝗲                         𝗥𝗔𝗡𝗞             𝗗𝗘𝗦𝗖𝗜𝗣𝗧𝗜𝗢𝗡")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 1 ",   "cmd/brace                     low        Bash Brace Expansion Command Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 2 ", "cmd/echo                      good       Echo Command Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 3 ", "generic/eicar                 manual     The EICAR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 4 ""generic/none                   normal     The none Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 5 ", "ruby/base64                   great      Ruby Base64 Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 6 ", "sparc/longxor_tag             normal     SPARC DWORD XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 7 ", "x64/xor                       normal     XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 8 ", "x64/xor_context               normal     Hostname-based Context Keyed Payload Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 9 ", "x64/xor_dynamic               normal     Dynamic key XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 10 ", "x64/zutto_dekiru              manual     Zutto Dekiru")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 11 ", "x86/add_sub                   manual     Add/Sub Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 12 ", "x86/alpha_mixed               low        Alpha2 Alphanumeric Mixedcase Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 13 ", "x86/alpha_upper               low        Alpha2 Alphanumeric Uppercase Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 14 ", "x86/avoid_underscore_tolower  manual     Avoid underscore/tolower")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 15 ", "x86/avoid_utf8_tolower        manual     Avoid UTF8/tolower")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 16 ", "x86/bloxor                    manual     BloXor - A Metamorphic Block Based XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 17 ", "x86/bmp_polyglot              manual     BMP Polyglot")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 18 ", "x86/call4_dword_xor           normal     Call+4 Dword XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 19 ", "x86/context_cpuid             manual     CPUID-based Context Keyed Payload Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 20 ", "x86/context_stat              manual     stat(2)-based Context Keyed Payload Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 21 ", "x86/context_time              manual     time(2)-based Context Keyed Payload Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 22 ", "x86/countdown                 normal     Single-byte XOR Countdown Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 23 ", "x86/fnstenv_mov               normal     Variable-length Fnstenv/mov Dword XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 24 ", "x86/jmp_call_additive         normal     Jump/Call XOR Additive Feedback Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 25 ", "x86/nonalpha                  low        Non-Alpha Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 26 ", "x86/nonupper                  low        Non-Upper Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 27 ", "x86/opt_sub                   manual     Sub Encoder (optimised)")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 28 ", "x86/service                   manual     Register Service")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 29 ", "x86/shikata_ga_nai            excellent  Polymorphic XOR Additive Feedback Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 30 ", "x86/single_static_bit         manual     Single Static Bit")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 31 ", "x86/unicode_mixed             manual     Alpha2 Alphanumeric Unicode Mixedcase Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 32 ", "x86/unicode_upper             manual     Alpha2 Alphanumeric Unicode Uppercase Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 33 ", "x86/xor_dynamic               normal     Dynamic key XOR Encoder")
                print("")
                encoder = int(input(colored("Encoder >>> ", "blue")))
                if encoder == 1:
                    print("Encoding type cmd/echo")
            elif inp=="n" or inp=="N":
                def animated_marker():

                    widgets = ['Loading: ', progressbar.AnimatedMarker()]
                    bar = progressbar.ProgressBar(widgets=widgets).start()

                    for i in range(50):
                        time.sleep(0.1)
                        bar.update(i)

                animated_marker()
                os.system("clear")
                
        elif connection == 2:
            os.system("clear")
            print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Use /reverse_https")
            time.sleep(1)
            os.system("clear")
            def animated_marker():

                widgets = ['Loading: ', progressbar.AnimatedMarker()]
                bar = progressbar.ProgressBar(widgets=widgets).start()

                for i in range(30):
                    time.sleep(0.1)
                    bar.update(i)
            
            animated_marker()
            os.system("clear")
            inp = input(colored("Do you want to encoder [Y/n]>", "yellow"))
            if inp=="y" or inp=="Y":
                os.system("clear")
                print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Use Encoder")
                time.sleep(1)
                os.system("clear")
                def animated_marker():

                    widgets = ['Loading: ', progressbar.AnimatedMarker()]
                    bar = progressbar.ProgressBar(widgets=widgets).start()

                    for i in range(30):
                        time.sleep(0.1)
                        bar.update(i)

                animated_marker()
                os.system("clear")
                print("""
                ███████ ███    ██  ██████  ██████  ██████  ███████ ██████  
                ██      ████   ██ ██      ██    ██ ██   ██ ██      ██   ██ 
                █████   ██ ██  ██ ██      ██    ██ ██   ██ █████   ██████  
                ██      ██  ██ ██ ██      ██    ██ ██   ██ ██      ██   ██ 
                ███████ ██   ████  ██████  ██████  ██████  ███████ ██   ██ """)
                print("                                                           𝘾𝙊𝘿𝙀 𝘽𝙔 𝙒-𝙆𝙧𝙖𝙭𝙘𝙠𝙚𝙧")
                print("")
                print("     𝗡𝗮𝗺𝗲                         𝗥𝗔𝗡𝗞             𝗗𝗘𝗦𝗖𝗜𝗣𝗧𝗜𝗢𝗡")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 1 ",   "cmd/brace                     low        Bash Brace Expansion Command Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 2 ", "cmd/echo                      good       Echo Command Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 3 ", "generic/eicar                 manual     The EICAR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 4 ""generic/none                   normal     The none Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 5 ", "ruby/base64                   great      Ruby Base64 Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 6 ", "sparc/longxor_tag             normal     SPARC DWORD XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 7 ", "x64/xor                       normal     XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 8 ", "x64/xor_context               normal     Hostname-based Context Keyed Payload Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 9 ", "x64/xor_dynamic               normal     Dynamic key XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 10 ", "x64/zutto_dekiru              manual     Zutto Dekiru")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 11 ", "x86/add_sub                   manual     Add/Sub Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 12 ", "x86/alpha_mixed               low        Alpha2 Alphanumeric Mixedcase Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 13 ", "x86/alpha_upper               low        Alpha2 Alphanumeric Uppercase Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 14 ", "x86/avoid_underscore_tolower  manual     Avoid underscore/tolower")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 15 ", "x86/avoid_utf8_tolower        manual     Avoid UTF8/tolower")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 16 ", "x86/bloxor                    manual     BloXor - A Metamorphic Block Based XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 17 ", "x86/bmp_polyglot              manual     BMP Polyglot")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 18 ", "x86/call4_dword_xor           normal     Call+4 Dword XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 19 ", "x86/context_cpuid             manual     CPUID-based Context Keyed Payload Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 20 ", "x86/context_stat              manual     stat(2)-based Context Keyed Payload Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 21 ", "x86/context_time              manual     time(2)-based Context Keyed Payload Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 22 ", "x86/countdown                 normal     Single-byte XOR Countdown Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 23 ", "x86/fnstenv_mov               normal     Variable-length Fnstenv/mov Dword XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 24 ", "x86/jmp_call_additive         normal     Jump/Call XOR Additive Feedback Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 25 ", "x86/nonalpha                  low        Non-Alpha Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 26 ", "x86/nonupper                  low        Non-Upper Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 27 ", "x86/opt_sub                   manual     Sub Encoder (optimised)")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 28 ", "x86/service                   manual     Register Service")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 29 ", "x86/shikata_ga_nai            excellent  Polymorphic XOR Additive Feedback Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 30 ", "x86/single_static_bit         manual     Single Static Bit")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 31 ", "x86/unicode_mixed             manual     Alpha2 Alphanumeric Unicode Mixedcase Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 32 ", "x86/unicode_upper             manual     Alpha2 Alphanumeric Unicode Uppercase Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 33 ", "x86/xor_dynamic               normal     Dynamic key XOR Encoder")
                print("")
                encoder = int(input(colored("Encoder >>> ", "blue")))
            if inp=="n" or inp=="N":
                os.system("clear")
                print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Not Use Encoder")
                time.sleep(0.5)
                print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Creating Malware")
                time.sleep(1)
                os.system("clear")
        elif connection == 3:
            os.system("clear")
            print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Use /reverse_tcp")
            time.sleep(1)
            os.system("clear")
            def animated_marker():

                widgets = ['Loading: ', progressbar.AnimatedMarker()]
                bar = progressbar.ProgressBar(widgets=widgets).start()

                for i in range(30):
                    time.sleep(0.1)
                    bar.update(i)

            animated_marker()
            os.system("clear")
            inp = input(colored("Do you want to encoder [Y/n]>", "yellow"))
            if inp=="y" or inp=="Y":
                os.system("clear")
                print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Use Encoder")
                time.sleep(1)
                os.system("clear")
                def animated_marker():

                    widgets = ['Loading: ', progressbar.AnimatedMarker()]
                    bar = progressbar.ProgressBar(widgets=widgets).start()

                    for i in range(30):
                        time.sleep(0.1)
                        bar.update(i)

                animated_marker()
                os.system("clear")
                print("""
                ███████ ███    ██  ██████  ██████  ██████  ███████ ██████  
                ██      ████   ██ ██      ██    ██ ██   ██ ██      ██   ██ 
                █████   ██ ██  ██ ██      ██    ██ ██   ██ █████   ██████  
                ██      ██  ██ ██ ██      ██    ██ ██   ██ ██      ██   ██ 
                ███████ ██   ████  ██████  ██████  ██████  ███████ ██   ██ """)
                print("                                                           𝘾𝙊𝘿𝙀 𝘽𝙔 𝙒-𝙆𝙧𝙖𝙭𝙘𝙠𝙚𝙧")
                print("")
                print("     𝗡𝗮𝗺𝗲                         𝗥𝗔𝗡𝗞             𝗗𝗘𝗦𝗖𝗜𝗣𝗧𝗜𝗢𝗡")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 1 ",   "cmd/brace                     low        Bash Brace Expansion Command Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 2 ", "cmd/echo                      good       Echo Command Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 3 ", "generic/eicar                 manual     The EICAR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 4 ""generic/none                   normal     The none Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 5 ", "ruby/base64                   great      Ruby Base64 Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 6 ", "sparc/longxor_tag             normal     SPARC DWORD XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 7 ", "x64/xor                       normal     XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 8 ", "x64/xor_context               normal     Hostname-based Context Keyed Payload Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 9 ", "x64/xor_dynamic               normal     Dynamic key XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 10 ", "x64/zutto_dekiru              manual     Zutto Dekiru")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 11 ", "x86/add_sub                   manual     Add/Sub Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 12 ", "x86/alpha_mixed               low        Alpha2 Alphanumeric Mixedcase Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 13 ", "x86/alpha_upper               low        Alpha2 Alphanumeric Uppercase Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 14 ", "x86/avoid_underscore_tolower  manual     Avoid underscore/tolower")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 15 ", "x86/avoid_utf8_tolower        manual     Avoid UTF8/tolower")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 16 ", "x86/bloxor                    manual     BloXor - A Metamorphic Block Based XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 17 ", "x86/bmp_polyglot              manual     BMP Polyglot")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 18 ", "x86/call4_dword_xor           normal     Call+4 Dword XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 19 ", "x86/context_cpuid             manual     CPUID-based Context Keyed Payload Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 20 ", "x86/context_stat              manual     stat(2)-based Context Keyed Payload Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 21 ", "x86/context_time              manual     time(2)-based Context Keyed Payload Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 22 ", "x86/countdown                 normal     Single-byte XOR Countdown Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 23 ", "x86/fnstenv_mov               normal     Variable-length Fnstenv/mov Dword XOR Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 24 ", "x86/jmp_call_additive         normal     Jump/Call XOR Additive Feedback Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 25 ", "x86/nonalpha                  low        Non-Alpha Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 26 ", "x86/nonupper                  low        Non-Upper Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 27 ", "x86/opt_sub                   manual     Sub Encoder (optimised)")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 28 ", "x86/service                   manual     Register Service")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 29 ", "x86/shikata_ga_nai            excellent  Polymorphic XOR Additive Feedback Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 30 ", "x86/single_static_bit         manual     Single Static Bit")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 31 ", "x86/unicode_mixed             manual     Alpha2 Alphanumeric Unicode Mixedcase Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 32 ", "x86/unicode_upper             manual     Alpha2 Alphanumeric Unicode Uppercase Encoder")
                print("")
                print(Fore.BLACK+Back.LIGHTBLUE_EX+" 33 ", "x86/xor_dynamic               normal     Dynamic key XOR Encoder")
                print("")
                encoder = int(input(colored("Encoder >>> ", "blue")))
            elif inp=="n" or inp=="N":
                os.system("clear")
                print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Not Use Encoder")
                time.sleep(0.5)
                print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Creating Malware")
                time.sleep(1)
                os.system("clear")
        elif connection == 4:
            os.system("clear")
            print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Use _reverse_http")
            time.sleep(1)
            os.system("clear")

elif os == 2:
    print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Use Window")
elif os == 3:
    print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Use IPhone")
elif os == 4:
    print(Fore.RED+"["+Fore.RESET+Fore.YELLOW+"!"+Fore.RESET+Fore.RED+"]"+Fore.RESET+Fore.LIGHTGREEN_EX+"Use Mac")
else:
    print(Fore.RED+"["+Fore)
